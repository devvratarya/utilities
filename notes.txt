I’m Rendering Pages as PDFs in My Application  -->  Use Visualforce. Lightning Components don’t support rendering as PDF output yet.

ich muss das im Hinterkopf behalten sollten

bewährte Vorgehensweisen --> proven approches --> best practices

benutzerdefinierter Objekte --> custom object
--------------------------------------
soap VS rest:
https://trailhead.salesforce.com/modules/event_monitoring/units/event_monitoring_query
Here, we see the other major difference between SOAP and REST when it comes to querying event log files. The returned log files are the same, but they’re presented in different formats. When you retrieve your event log files using SOAP, the result is a serialized, Base64 string. If your organization plans on using tools like Informatica to work with event log files, you want to use SOAP to retrieve your data. REST, on the other hand, deserializes the log file. It’s still not pretty, but as you’ll see in the upcoming section, other tools can transform the REST results into an easy-to-read format.

---------------------------------------
Data import:
To analyse:
SF: Data Loader uses the SOAP API to process records. For faster processing, you can configure it to use the Bulk API instead. The Bulk API is optimized to load a large number of records simultaneously. It is faster than the SOAP API due to parallel processing and fewer network round-trips.
--> test it using the API practices and analyse the result how faster it can get.

1. it is recommended to test your data import witha  small test file or record file to confirm the field mapping and to make sure the data is imported correctly and no back end process is messing with the records.
2. to use the data import process, deactivate the workflow rules.
3. one can map the same field multiple times if required, for example address fields while importing can be mapped twice for contact as well as billing address.
4. unmapped fields are not imported
5. to import Multi select picklist, seperate the values by a semicolon in the import file.
6. Make sure the date format is aligned with your local salesforce settings.
7. vaölidation rules are fired when data is imported. If a a record fails, the particular record is not imported. One should consider deactivating the appropriate validation rules before running the import if the affect the records you are importing

---------------------------------------
Data Security:
The data security model is implemented at the user interface, but the impact of data security goes down till the API level. 
---------------------------------------

Lightning Components
--------------------
1. Salesforce requires My Domain as a security measure to help prevent malicious attacks—just in case a security hole lies hidden deep within a third-party or custom component.
2. A lightning component needs to implements="force:appHostable", for being hostable in the application.
3. Visualforce was created before mobile apps on phones became a thing. While you can develop mobile apps with Visualforce, none of the built-in components are mobile-savvy. Which means you write more code. Lightning Components, on the other hand, is specifically optimized to perform well on mobile devices.
4.Other Web development framworks AngularJS, React, or Ember.
To use these frameworks : We recommend using them with Visualforce, using what we call a container page, and packaging your chosen framework and app code into static resources. Using an empty container page has Visualforce get out of your way, and lets you use the full capabilities of your chosen framework.
5. Another thing to consider: general-purpose frameworks such as AngularJS are designed to be agnostic about the platform they run on top of, in particular data services. Lightning Components, on the other hand, is designed to connect natively with services provided by Salesforce and the Force.com platform. Which do you think is going to help you build apps faster?
6. Resources in a bundle are auto-wired together via a naming scheme for each resource type. Auto-wiring just means that a component definition can reference its controller, helper, etc., and those resources can reference the component definition. They are hooked up to each other (mostly) automatically.
7. You can’t add apps to Lightning Experience or the Salesforce app—you can only add components. After the last unit this might sound weird; what exactly do you add to the App Launcher, if not an app? What you add to App Launcher is a Salesforce app, which wraps up a Lightning component, something defined in a <aura:component>. A Lightning Components app—that is, something defined in a <aura:application> —can’t be used to create Salesforce apps. A bit weird, but there it is.
So, what’s an app good for? Why would you ever use one? We answered that question earlier. You publish functionality built with Lightning Components in containers. Lightning Components apps are one kind of container for our Lightning components.

Once again being practical, this usually means that you build all of your “app” functionality inside a top-level component. Then at the end, you stick that one component in a container—maybe a Lightning Components app, maybe the Salesforce app, maybe something else. If you use a my.app, the container can set up services for your main component, but otherwise it’s just there to host the component.
8. in JS controller:
    $A.enqueueAction(action) adds the server-side controller action to the queue of actions to be executed. All actions that are enqueued will run at the end of the event loop. Rather than sending a separate request for each individual action, the framework processes the event chain and batches the actions in the queue into one request. The actions are asynchronous and have callbacks.
If your action is not executing, make sure that you’re not executing code outside the framework’s normal rerendering lifecycle. For example, if you use window.setTimeout() in an event handler to execute some logic after a time delay, wrap your code in $A.getCallback(). You don't need to use $A.getCallback() if your code is executed as part of the framework's call stack; for example, your code is handling an event or in the callback for a server-side controller action.
9.{!} --- expression
{!v.message}, {!v.account.Id} ---- v is value provider (message is the name of the attribute). Value providers are a way to group, encapsulate and access related data.
{!c.handleClick} -- is also a value provider for the component's client side controller. handleClick is the function defined in that controller. So, {!c.handleClick} is a reference to an action handler in the components controller.

"LIGHTNING CONT..."

1. An expression is basically a formula, or a calculation, which you place within expression delimiters (“{!” and “}”). So, expressions look like the following:
2. You can’t use JavaScript in expressions in Lightning Components markup.
3. A controller is basically a collection of code that defines your app’s behavior when “things happen,” whereby “things” we mean user input, timer and other events, data updates, and so on. 
4. In a word, no. There are similarities, to be sure, but it would be more correct to say that Lightning Components is View-Controller-Controller-Model, or perhaps View-Controller-Controller-Database. Why is “controller” doubled up in that pattern name? Because when interacting with Salesforce, your components will have a server-side controller in addition to the client-side controller we’ve worked with in this unit. This dual controller design is the key difference between Lightning Components and MVC.
5. <lightning:input> is the Swiss army knife for input fields that’s infused with the goodness of SLDS styling. Use it whenever you find yourself reaching for the <ui:input> component variety like <ui:inputText>, <ui:inputNumber>, and others. Components in the ui namespace don’t come with SLDS styling and are considered to be legacy components.
6. Next, there’s an aura:id attribute set on each tag. What’s that for? It sets a (locally) unique ID on each tag it’s added to, and that ID is how you’ll read values out of the form fields. The fields all share the same ID in this example so that we can access them as an array for field validation. We’ll look at how to do that very shortly.
7. aria-* : The Accessible Rich Internet Applications specification 
8. when your controller needs a way to get to a child component, first set an aura:id on that component in markup, and then use component.find(theId) to get a reference to the component at runtime.
9. Helper function:
   --A component’s helper is the appropriate place to put code to be shared between several different action handlers.
   --A component’s helper is a great place to put complex processing details, so that the logic of your action handlers remains clear and streamlined.
   --Helper functions can have any function signature. That is, they’re not constrained the way that action handlers in the controller are. (Why is this? Because you are calling the helper function directly from your code. By contrast, the framework calls action handlers via the framework runtime.) It’s a convention and recommended practice to always provide the component as the first parameter to helper functions.
10. The static keyword. All @AuraEnabled controller methods must be static methods, and either public or global scope.
11. in controller.js the component.get("c.getdata"),  c. represents the remote Apex controller.
12. c. Identifier, three places in a component
     c. | Component markup | Client-side controller
     c. | Controller code  | Server-side controller
     c: | Markup | Default namespace
     we have c the client-side controller, c the default namespace, and c the server-side controller, all in Lightning Components
13. $A.enqueueAction(action).
    --It queues up the server request.
    --As far as your controller action is concerned, that’s the end of it.
    --You’re not guaranteed when, or if, you’ll hear back.
14.  The first issue is case sensitivity, and this boils down to Apex and Salesforce in general are case-insensitive, but JavaScript is case-sensitive. That is, “Name” and “name” are the same in Apex, but different in JavaScript.
15. There are two principal ways to interact with or affect another component. 
    --The first way is one we’ve seen and done quite a bit of already: setting attributes on the component’s tag. A component’s public attributes constitute one part of its API.
    --The second way to interact with a component is through events. 
    :-Like attributes, components declare the events they send out, and the events they can handle. Like attributes, these public events constitute a part of the component’s public API. 
16. With attributes:  you create a direct relationship between those two components. They are linked, and while they’re using public APIs to remain independent of each other, they’re still coupled.
    --Events are different. Components don’t send events to another component. That’s not how events work. Components broadcast events of a particular type. If there’s a component that responds to that type of event, and if that component “hears” your event, then it will act on it.
17. There are two types of events, component and application. Here we’re using a component event, because we want an ancestor component to catch and handle the event. An ancestor is a component “above” this one in the component hierarchy. If we wanted a “general broadcast” kind of event, where any component could receive it, we’d use an application event instead.
Different attribute types.
18. 


---------------------------------------
Primitives data types, such as Boolean, Date, DateTime, Decimal, Double, Integer, Long, or String. The usual suspects in any programming language.
Standard and custom Salesforce objects, such as Account or MyCustomObject__c.
Collections, such as List, Map, and Set.
Custom Apex classes.
Framework-specific types, such as Aura.Component, or Aura.Component[].




---------------------------------------
SalesforceDX:
1. Much of the setup you do for Salesforce DX enables you to use a new type of org called a scratch org. A scratch org is a dedicated, configurable, and short-term Salesforce environment that you can quickly spin up when starting a new project, a new feature branch, or a feature test.
2. Through the configuration file, you can configure the scratch org with different Salesforce editions and with just the features and preferences you want. And you can share the scratch org configuration file with other team members. That way, you all have the same basic org in which to do your development.
3. To get started with Salesforce DX, you choose an org to function as your Dev Hub. While you can enable Dev Hub in any paid org, it’s always best to practice somewhere other than production.
4. To get started, log in to the Dev Hub using the CLI, so you’re authorized to create scratch orgs. You can use sfdx force:auth:web:login to log in to various orgs
5. login to devhub useing sfdx force:auth:web:login -d -a DevHub
6. Adding the -d flag sets this org as the default Developer Hub. Use the -a to set an alias for the org (something catchy like DevHub). An alias is much easier to remember than the unique Dev Hub username.
7. Only indicate the -d flag for your Dev Hub. If you use it with a different org, you won’t be able to create scratch orgs until you correctly identify the Dev Hub using the config:set command.
8. login to the sandbox using following command: 
  --sfdx force:auth:web:login -r https://test.salesforce.com -a FullSandbox
  --sfdx force:auth:web:login -r https://test.salesforce.com -a DevSandbox
9. you can run the command sfdx force:org:list to see all the orgs you’ve logged in to. Adding the --verbose option provides you even more info.
10. Create a scratch org with the alias GeoAppScratch:
  -- sfdx force:org:create -s -f config/project-scratch-def.json -a GeoAppScratch
  ---The -s option indicates that you want this scratch org to be the default org for this project.
  ---The -f option is the path to the project scratch org configuration file.
11. Sync the changes you made in the scratch org with your local project:
  -- sfdx force:source:pull or sfdx force:source:pull -f
12. git remote add a git repository or any vcs
    --pull ur changes to git or vcs for the record
13. get data from scratch org to data foldersfdx force:data:tree:export -q "SELECT Name, Location__Latitude__s, Location__Longitude__s FROM Account WHERE Location__Latitude__s != NULL AND Location__Longitude__s != NULL" -d ./data
14. You now have sample data that you can import in the future with the command:
    sfdx force:data:tree:import --sobjecttreefiles data/Account.json
15. create a class
sfdx force:apex:class:create -n AccountController -d force-app/main/default/classes
16. create a lightning component
sfdx force:lightning:component:create -n AccountLocator -d force-app/main/default/aura
17. push the code to the scratch org
sfdx force:source:push
18. to pull meta data creeated on the scrratch org:
sfdx force:source:pull
19. 

---------------------------------------
Apex: Points to remember
------------------------
1. JavaScript Expandos and Private Attributes
Attributes, with their get/set dance, sometimes feel “high ceremony” to Visualforce developers. If you’re JavaScript-savvy, you might try to use a quirk of JavaScript, and set a value on the component instance from within an action function.

>>  component._myExpando = "A new string variable";
This expando, created on the fly, becomes part of your component instance. It looks like a nice, lightweight private instance variable.

The problem is that expandos create an opportunity for subtle bugs and memory leaks. While they’ll work, they’re also likely to cause problems, and for that reason we recommend against them. The recommended approach is to create a component attribute, and set its access level to private. (We also recommend prefixing the names of private attributes with an underscore (for example, _myAttribute), to make it obvious that they’re private variables.)
2. Lightning components server-side controller methods must be static, and either public or global.
3. For Lightning components, a consequence of the server-side controller methods being static is that you can’t store any component state on the server side. Keep component state in its client-side attributes, as described in a preceding section.
4. For Lightning components, Server-side actions return data. They don’t—they can’t—return a PageReference. Implement your navigation logic on the client side, not the server side.
5. Again for LIghtning components,
     Something that might not be obvious, but which causes you endless headaches if you miss it, is that parameter names used in the Apex method declaration must match the parameter names you use when creating the action on the client side.
Chute! 
     One more nonobvious constraint: Don’t give a server-side controller method the same name as a client-side action handler function. You’ll run into...weirdness. You should adopt a naming convention for your server-side and client-side methods that makes the distinction clear, and naming collisions impossible.
     You can’t usefully pass a custom Apex class as a parameter from client-side JavaScript to server-side Apex. Instead, use a plain JavaScript object to encapsulate the structured data of the parameter. Parse that object as necessary in your Apex code, for example, in the constructor for an Apex class.
     You can return a custom Apex class in the response from your server-side controller to client-side JavaScript. However, it’ll be serialized and deserialized as part of that process, and the result might not be exactly what you expect. Ladder! It’s often better to return a map with the data elements you want to include, or JSON you construct yourself.
     You can’t use Apex inner classes in Lightning components code. Your server-side Apex code can use them in processing a request, but the response returned to the client can’t be an instance of an inner class.
     You can’t use inheritance with custom Apex classes you intend to return in responses to Lightning components.
     If your Apex code encounters an error, you can create and throw an AuraHandledException. Catching other exceptions, such as a DML exception, and rethrowing them as an AuraHandledException also results in much better experience on the client side.
6. three ways you can access and modify your Salesforce data with Visualforce:
    a) Standard Visualforce
    b) Remote Objects
        Remote Objects, which we’re using throughout this module, is built to be almost as simple to use as standard Visualforce, but optimized for other use cases such as mobile apps.
        Remote Objects has two characteristics that make it great for use with the Salesforce app. First, it does away with the view state that’s part of standard Visualforce. View state is extra data that’s passed back and forth between the client browser and the server for every request. It’s part of what makes standard Visualforce simple to implement, but the extra data and requests can be a burden on mobile connections.
        Second, Remote Objects is JavaScript-based. This makes it natural to use with a variety of mobile frameworks that use JavaScript themselves. We’ll talk more about that in the last unit in this module.
    c) Javascript Remoting
       JavaScript Remoting is, as you can probably guess from the name, also based in JavaScript. However, where Remote Objects is simple and straightforward, JavaScript Remoting is flexible and powerful. JavaScript Remoting gives you the most capability to create exactly the app experience you want to deliver, and to provide the best performance for those apps. But to do so, you’ll write more code yourself, and you’ll need to master some complex concepts.
        For now, we’ll work with Remote Objects. It’s simpler than JavaScript Remoting, but it’s more than capable. 

7. 
    
